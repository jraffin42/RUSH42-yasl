#!yasl

{
	"\n"
	print
} nl

{
	print nl
	1 exit
} error_exit

{
	"0" -
	48 +
} to_ascii				// cast a char to int

{
	"\e[48;2;":5
	";":3
	1:=:2
	255:2
	2:&:3
	"m  ":3
	3:+:3
	3:+:3
	2:!
	";":4
	1:=:4
	8:4
	4:>>:4
	255:4
	4:&:4
	3:=:4
	4:+:4
	4:+:4
	2:!
	1:=:5
	16:5
	5:>>:5
	4:=:5
	5:+:5
	5:+:5
	5:=:6
} rgb_encode

{
	0:1
	1:8
	8:=:8
	8:@
	(
		9:=:9
		1:=:9
		9:]#[:7
		7:=:7
		0:=:7
		7:%==:8 ? (0:8) : (1:8 1:1 1:+:1)
		9:[#]:1
		1:%==:8 ? (! "Character not in base":0 0:error_exit) : 1:!
		8:=:8
	)
} decode

{
	2:=:0
	"Found square : "
	6:=:0
	"Image received, nb pixel : "
	2:0
	#(print print nl)
} print_header

{
    = ? (
        25:2
        =:1
        2:= @ (
            1:=:2 =:2 2:/:2
            =:2 ! 2:+ 2 /
            1:2 2:-:2 2:=
        )
        1:! 2:!
    )
} isqrt

{
	6:= isqrt
	= = *
	6:= != ? (! 0)
} get_square


!!

# 0 != ? ("Wrong number of arguments." error_exit)

1:1
1:@
(
	read:2
	0:2
	2:>:1										// !nb_char_read > 0 ? break ;
)
2:#:0											// number of read
#(2:=:1 2:!)									// split lists from 2 to 0
1:#:0
#(1:][:0 !)

#
~~ ? ("Empty file" error_exit)
#
(4:0 0:% 0:0 0:!= ? ("Bad file" error_exit))	// total_len % 4 ?

"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ ":9

#
4:0
0:/
#(
	decode
	26:1 1:<<:1 26:1 1:>>:1 !
	decode
	26:1 1:<<:1 20:1 1:>>:1 !
	1:|:1
	decode
	26:1 1:<<:1 14:1 1:>>:1 !
	1:|:1
	decode
	26:1 1:<<:1 8:1 1:>>:1 !
	1:|:1
	rgb_encode
)

6:#:6
get_square
0:=:2
~~ ? ("Image is not a square" error_exit)
print_header
6:!
2:=:0
#(
	2:=:6
	6:#print
	"\e[0m" print nl
)
